1. Batch Data Processing- Hours, day, week, month or even year (just wait for minimum threshold time )->Hadoop, Hive and Apache spark are helpfull 
2. Near Real Time-> more than 30s, 1m or 2 min not a completely real time but this is near real time (at least wait for few seconds)
3. Real Time Data Process- Instantly-> 
->Bank Transaction
->Application for live cricket scores and aggregations
-> Gaming application (live Tournaments)
->Trending twitter hastags
->Any type of real time dashboards exampla are stock exchange, live count in a shoping mall
Kind of messaging system which can help us to hold the data. Messaging queses for real time processing- (hold the data for real time process.)
 -> Messaging queues-whatever even we are producing, whatever event are getting generated 
 ->kafka messaging system for stream processing-> Whenever there is a system where records are coming in the real time we call it as a stream processing(Stream means continuous flow of data)
Source App -> DB-> Kafka-> (Process Engine for real time analysis)->dump data for somewhere -> Destination-> Dashboard
Kafka->3 components majorly
      1. Producer
      2. Consumer
      3. Connector

Producer are writing the data into the kafka->publishing the data. The producer 
Consumer are reading the data from the kafka queue ->Consumers basically subscribes which are subscribing one specific space within the kafka and just listening the records from the specific kafka queue.
Kafka component: 
  1. Broker---
  2. Topics
  3. Partitions
  4. Replicas
  5. offsets
  6. Commits- syncronous and asyncronous
  7. consumer Groups
  8. Parallalism in kafka
  9. Back Pressure
Kafka Architecture: Its also one kind of cluster. Cluster-> The combination of multiples commodity hardwares connected over the networks so that it will acts as a single machine.
In a cluster there will be a multiple those comodity hardwares which are eventually call as a server.
Leader-> 
Brokers:-Brokers means servers in a cluster.(Actual need of Brokers to store the data)>Horizontally scallable the kafka

Topics:---Small segments or a space name given within a kafka queue. Each producer has it own topics.One topic has multiple partition where we will writing the data.

for example we have 3 apps, PayApp, Fapp and PrimeApp. In Pay app I will explicitely mention that in which topics of kafka these 3 app can write.
Message=I record----- whatever messages the particular producer writing into that topic, those will go actually into the partition.
Whenever kafka write any message into the particular partition, message will be written one particular offset or one particular index. So that will be known as a offset value. 
Current partition index=offset, offset is someting a incremented value and will be a unique id for that particular message within one particular partition.
Order of massage will be maintain within the partition
Partitions-mainly use for fault tolerance and parallelism
How we will be achieve falult tolerance? creating duplicates and replicas.
1.0.0 pause

Consumer parts:
Consumer will subscribes a particular topic first and then it is eligible to listen to the particular topics-> they need to litschen-Continuously poling(after 2 or 3 seconds just send the poll request in order to check wheather new records have been inserted ito the any of these partiton of a kafka topics)
Consumer properties
->Latest(Read data from each partition from current offset)
->Earliest(Read for each partition from start offset)
Biggest challange in particular real time applications
Question->How the consumer is ging to know that previously which record i have read and in the next iteration from which location i will start to read?
Consumer needs to do the offset commit.
lets say partiton 0 and r1 and r2 record are there.







